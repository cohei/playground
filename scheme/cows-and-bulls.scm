(define *seed* 1)
(define (srand x)
  (set! *seed* x))
(define (irand)
  (set! *seed* (modulo (+ (* 69069 *seed*) 1) #x100000000))
  *seed*)
(define (random)
  (* (/ 1.0 #x100000000) (irand)))

(define (make-number n)
  (modulo (quotient (irand) #x10000) n))
(define (make-answer answer)
  (if (= 4 (length answer))
      answer
      (let ([num (make-number 10)])
        (if (member num answer)
            (make-answer answer)
            (make-answer (cons num answer))))))
(define (input-one-number)
  (let ([n (read)])
    (cond [(not (integer? n)) (display "please input integer(0-9)\n") #f]
          [(<= 0 n 9) n]
          [else (display "range error\n") #f])))
(define (input-four-numbers)
  (display "please input four numbers\n> ")
  (let loop ([ls '()])
    (if (= 4 (length ls))
        (reverse ls)
        (let ([n (input-one-number)])
          (cond [(not n) (delete-input-data) (input-four-numbers)]
                [(member n ls) (display "same number error\n")
                               (delete-input-data) (input-four-numbers)]
                [else (loop (cons n ls))])))))
(define (delete-input-data)
  (let ([c (read-char)])
    (if (not (char=? #\newline c))
        (delete-input-data))))
(define (count-bulls ans dat)
  (cond [(null? ans) 0]
        [(= (car ans) (car dat)) (+ 1 (count-bulls (cdr ans) (cdr dat)))]
        [else (count-bulls (cdr ans) (cdr dat))]))
(define (count-same-number ans dat)
  (let loop ([dat dat] [n 0])
    (cond [(null? dat) n]
          [(member (car dat) ans) (loop (cdr dat) (+ n 1))]
          [else (loop (cdr dat) n)])))
(define (count-cows ans dat)
  (- (count-same-number ans dat) (count-bulls ans dat)))
(define (display-gameover answer)
  (display "GameOver: ")
  (display answer)
  (newline))
(define (display-bulls-cows count bulls cows)
  (display (format "~a : bulls: ~a, cows: ~a~n" count bulls cows)))
(define (play ans)
  (let loop ([count 1])
    (let ([dat (input-four-numbers)])
      (display-bulls-cows count (count-bulls ans dat) (count-cows ans dat))
      (cond ((= (count-bulls ans dat) 4)
             (display "you win!\n"))
            ((= count 10)
             (display-gameover ans))
            (else
             (loop (+ count 1)))))))
(srand (current-seconds))
(play (make-answer '()))
