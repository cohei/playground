(define (fringe tree)
  (letrec ([fringen (lambda (node alt)
                      (lambda (getter)
                        (if (not (pair? node))
                            (getter node alt)
                            ((fringen (car node)
                                      (lambda (getter1)
                                        ((fringen (cdr node) alt)
                                         getter)))
                             (getter)))))])
    (fringen tree (lambda (getter)
                    (getter '<exhausted> '())))))

(define (same-fringe? tree1 tree2)
  (letrec ([same (lambda (s1 s2)
                   (s1 (lambda (x1 r1)
                         (s2 (lambda (x2 r2)
                               (if (equal? x1 x2)
                                   (if (equal? x1 '<exhausted>)
                                       #t
                                       (same r1 r2))
                                   #f))))))])
    (same (fringe tree1)
          (fringe tree2))))

(define (fringe4 tree)
  (letrec ([fringe-aux (lambda (node alt)
                         (if (not (pair? node))
                             (lambda (msg)
                               (if (eq? msg 'first)
                                   node
                                   (if (eq? msg 'next)
                                       (alt)
                                       (error))))
                             (fringe-aux (car node)
                                         (lambda ()
                                           (fringe-aux (cdr node) alt)))))])
    (fringe-aux tree
                (lambda ()
                  (lambda (msg) (if (eq? msg 'first)
                                    '*eof*
                                    (error)))))))
(define (samefringe t1 t2)
  (do ((c1 (fringe4 t1) (c1 'next))
       (c2 (fringe4 t2) (c2 'next)))
    ((or (not (eq? (c1 'first) (c2 'first)))
         (eq? (c1 'first) '*eof*)
         (eq? (c2 'first) '*eof*))
     (eq? (c1 'first) (c2 'first)))))